size	5	10	100	1K	10K	100K	1M	10M	100M

alg

bubble	0	0	0	0	0.7	87.17	n/a	n/a	n/a
insert	0	0	0	0	0.14	16.86	n/a	n/a	n/a
merge	0	0	0	0	0.01	0.05	0.6	8.2	n/a
quick	0	0	0	0	0	0.03	0.48	7.6	112.6
heap	0	0	0	0	0.01	0.05	1.05	18.8	300.5

Вывод:
	Если при малых кол-вах строк (5-1000) асимптотика алгоритмов особо не влияла на время работы, то уже при больших кол-вах строк разница во времени работы оказывалась существенной. Существенные различия во времени работы между bubbleSort и insertSort стали заметны при 100K строк. Оба алгоритма работают за O(n^2), но при 100К insertSort быстрее bubbleSort примерно в 5-6 раз. Разница между mergeSort и quickSort, которые работают за O(n*logn),  заметна при 100М: для mergeSort требуется выделение дополнительной памяти в отличие от quickSort, что является ключом в разнице времени работы программы при этих алгоритмах. Различие между работой quickSort и heapSort (также работают O(n*logn) в среднем) вижу в количестве swap-ов в первом и в последнем.
