size	5	10	100	1K	10K	100K	1M	10M	100M

alg

bubble	0	0	0	0.01	0.9	106.33	n/a	n/a	n/a
insert	0	0	0	0	0.14	16.86	n/a	n/a	n/a
merge	0	0	0	0	0.01	0.09	1.06	13.6	n/a
quick	0	0	0	0	0.01	0.08	1.05	14.1	204.3
heap	0	0	0	0	0.01	0.1	1.9	31.5	508.7

Вывод:
	Если при малых кол-вах строк (5-1000) асимптотика алгоритмов особо не влияла на время работы, то уже при больших кол-вах строк разница во времени работы оказывалась существенной. Существенные различия во времени работы между bubbleSort и insertSort стали заметны при 100K строк. Оба алгоритмы работают за O(n^2), но при 100К insertSort быстрее bubbleSort примерно в 6 раз. Разница между mergeSort и quickSort, которые работают за O(n*logn),  заметна при 100М: для mergeSort требуется выделение дополнительной памяти в отличие от quickSort, что является ключом в разнице времени работы программы при этих алгоритмах. Различие между работой quickSort и heapSort (также работают O(n*logn) в среднем) вижу в количестве swap-ов в первом и в последнем. Если в quickSort swap-ы ограничены условием, то в heapSort условий для swap-ов нет.
