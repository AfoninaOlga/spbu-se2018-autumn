#!/bin/bash
. $(dirname $(readlink -f "${BASH_SOURCE[0]}"))/../../common/logger
>/dev/null echo "Running common $TESTNAME for task $TASKNAME of user $USERNAME in $PWD with $# parameters: $*"
compile(){
  TEST_CFLAGS_RELAXED=""
  TEST_CFLAGS_STRICT="-Wall -Wextra -Wpedantic -std=c99 -Werror -Wno-error=sign-compare -fsanitize=address -fsanitize=undefined"
  TEST_O2="-O2"
  TEST_O3="-O3 -flto"
  local exitCode=0
  if gcc ${TEST_CFLAGS_RELAXED} ${TEST_O2} -o $1 *.c 2>/dev/null ; then
    if gcc ${TEST_CFLAGS_STRICT} ${TEST_O3} -o $1 *.c 2>/dev/null ; then
      true
    else
      exitCode=$?
      logError "Failed to compile with strict checks for release"
    fi
  else
    exitCode=$?
    logError "Failed to compile"
  fi
  return $exitCode
}

runBinary() {
  local duration=5
  if [[ "$1" =~ ^[0-9]+$ ]]; then
    duration="$1"
    shift
  fi
  timeout --preserve-status --kill-after=10 --signal=TERM $duration $*
}

runTest(){
  TEST_BINARY=./test
  rm -f $TEST_BINARY
#  for c in *.c ; do
#    clang-format -style LLVM $c > $c.reformatted
#    colordiff $c $c.reformatted | tail -n +2 | head -n 20 || true
#  done
  if ! compile $TEST_BINARY ; then
    return 171
  fi
  local test_array_len=1
  local test_input=/etc/hostname
  local test_algorithm=""
  local test_algorithm_list="bubble insertion merge quick radix"
  local exitCode
  TESTSTEP=0
  exitCode=0
  # bad sort algo name
  >/dev/null 2>&1 runBinary $TEST_BINARY $test_array_len $test_input "badname" || exitCode=$?
  [[ $exitCode > 0 ]] && [[ $exitCode < 5 ]] && ((TESTSTEP+=1)) || return 155 # && logOk "step $TESTSTEP finished"

  # empty sort algo name
  >/dev/null 2>&1 runBinary $TEST_BINARY $test_array_len $test_input "" || exitCode=$?
  [[ $exitCode > 0 ]] && [[ $exitCode < 5 ]] && ((TESTSTEP+=1)) || return 155 # && logOk "step $TESTSTEP finished"

  # len is greater than actual data
  >/dev/null 2>&1 runBinary $TEST_BINARY $test_array_len /dev/null "quick" || exitCode=$?
  [[ $exitCode > 0 ]] && [[ $exitCode < 5 ]] && ((TESTSTEP+=1)) || return 155 # && logOk "step $TESTSTEP finished"

  # empty file
  >/dev/null 2>&1 runBinary $TEST_BINARY 0 /dev/null "quick"

  for a in $test_algorithm_list ; do 
    local out=std.out
    local err=std.err
    runBinary $TEST_BINARY $test_array_len $test_input $a > $out 2>$err || exitCode=$?
    if [[ $exitCode != 0 ]] ; then return $exitCode; fi
    [ -s $out ] && [ ! -s $err ] && ((TESTSTEP+=1)) # && logOk "step $TESTSTEP finished"
    diff <(sort $test_input) $out
  done

}


runTest
